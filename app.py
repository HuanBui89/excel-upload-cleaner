import streamlit as st
import pandas as pd
from io import BytesIO
import unicodedata

# H√†m ti·ªán √≠ch: b·ªè d·∫•u ti·∫øng Vi·ªát (ƒë·ªÉ so kh·ªõp kh√¥ng ph√¢n bi·ªát d·∫•u)
def remove_accents(input_str: str) -> str:
    if not isinstance(input_str, str):
        input_str = str(input_str)
    return ''.join(ch for ch in unicodedata.normalize('NFD', input_str) if unicodedata.category(ch) != 'Mn')

# H√†m ƒë·ªçc CSV v·ªõi encoding ph√π h·ª£p (th·ª≠ m·ªôt s·ªë encoding ph·ªï bi·∫øn)
def read_csv_any_encoding(file):
    encodings = ['utf-8', 'utf-8-sig', 'latin1']
    for enc in encodings:
        try:
            file.seek(0)
            return pd.read_csv(file, header=None, encoding=enc)
        except Exception:
            continue
    file.seek(0)
    return pd.read_csv(file, header=None)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("Excel to GHN Format Converter")
st.write("Upload Excel/CSV files and map the columns to GHN format. H·ªó tr·ª£ t·ª± ƒë·ªông nh·∫≠n di·ªán v√† ch·ªçn th·ªß c√¥ng khi c·∫ßn.")

# Upload nhi·ªÅu file
uploaded_files = st.file_uploader("üìÇ T·∫£i l√™n file Excel ho·∫∑c CSV", type=["xlsx", "xls", "csv"], accept_multiple_files=True)

if uploaded_files:
    combined_output = []   # Danh s√°ch d·ªØ li·ªáu sau khi chu·∫©n h√≥a t·ª´ c√°c file/sheet
    all_mapped = True      # C·ªù ƒë·ªÉ ki·ªÉm tra xem m·ªçi tr∆∞·ªùng b·∫Øt bu·ªôc ƒë√£ ƒë∆∞·ª£c map hay ch∆∞a

    # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn kh·ªëi l∆∞·ª£ng m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ c·ªôt kh·ªëi l∆∞·ª£ng
    default_weight = st.number_input("Kh·ªëi l∆∞·ª£ng m·∫∑c ƒë·ªãnh (gram) n·∫øu kh√¥ng c√≥ c·ªôt kh·ªëi l∆∞·ª£ng:", min_value=0, value=100, step=50)

    # Duy·ªát t·ª´ng file ƒë√£ upload
    for uploaded_file in uploaded_files:
        file_name = uploaded_file.name
        try:
            # ƒê·ªçc file v√†o DataFrame (h·ªó tr·ª£ nhi·ªÅu sheet n·∫øu l√† Excel)
            if file_name.lower().endswith(('.csv', '.txt')):
                # File CSV
                df_list = [ read_csv_any_encoding(uploaded_file) ]
                sheet_names = ["CSV"]
            else:
                # File Excel
                xls = pd.ExcelFile(uploaded_file)
                sheet_names = xls.sheet_names
                df_list = []
                for sheet in sheet_names:
                    df_sheet = pd.read_excel(xls, sheet_name=sheet, header=None)
                    # B·ªè qua sheet tr·ªëng
                    if df_sheet.shape[0] == 0:
                        continue
                    df_list.append(df_sheet)
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file {file_name}: {e}")
            all_mapped = False
            continue

        # Duy·ªát t·ª´ng DataFrame (t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng sheet)
        for idx, df in enumerate(df_list):
            sheet_name = sheet_names[idx] if idx < len(sheet_names) else f"Sheet{idx+1}"
            header_present = False

            # Ki·ªÉm tra d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ x√°c ƒë·ªãnh header
            if df.shape[0] > 0:
                first_row = df.iloc[0].astype(str).fillna("").tolist()
                first_row_texts = [remove_accents(x).lower() for x in first_row]
                # T·∫≠p t·ª´ kh√≥a g·ª£i √Ω header (vi·∫øt kh√¥ng d·∫•u, ch·ªØ th∆∞·ªùng)
                header_keywords = [
                    "t√™n", "ten", "h·ªç t√™n", "ho ten", "h·ªç", "ho ", 
                    "sdt", "ƒëi·ªán tho", "dien tho", "ƒët", "so dt", "phone", 
                    "ƒë·ªãa ch·ªâ", "dia chi", "ƒëc", "dc ", "address", 
                    "s·∫£n ph", "san ph", "h√†ng", "hang", "sp ", "product", 
                    "size", "ph√¢n lo·∫°i", "phan loai", "m√†u", "mau", 
                    "cod", "thu h·ªô", "thu ho", "ti·ªÅn thu", "tien thu", 
                    "s·ªë l∆∞·ª£ng", "so luong", "sl", 
                    "kh·ªëi l∆∞·ª£ng", "khoi luong", "tr·ªçng l∆∞·ª£ng", "trong luong", "weight", 
                    "ghi ch√∫", "ghi chu"
                ]
                matches = 0
                for cell in first_row_texts:
                    for kw in header_keywords:
                        if kw in cell:
                            matches += 1
                            break
                # N·∫øu xu·∫•t hi·ªán t·ª´ kh√≥a >=2 c·ªôt, gi·∫£ ƒë·ªãnh c√≥ header
                if matches >= 2:
                    header_present = True

            # N·∫øu c√≥ header: ƒë·∫∑t t√™n c·ªôt v√† b·ªè d√≤ng header kh·ªèi data
            if header_present:
                new_header = df.iloc[0].fillna("").astype(str).tolist()
                df = df[1:].reset_index(drop=True)
                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p tr√πng t√™n c·ªôt
                cols = []
                seen = {}
                for col in new_header:
                    col = col.strip()
                    if col == "" or col is None:
                        col = "Column"
                    if col in seen:
                        seen[col] += 1
                        col = f"{col}_{seen[col]}"
                    else:
                        seen[col] = 1
                    cols.append(col)
                df.columns = cols
            else:
                # N·∫øu kh√¥ng c√≥ header: ƒë·∫∑t t√™n c·ªôt l√† s·ªë th·ª© t·ª± (0,1,2,...)
                df.columns = list(range(df.shape[1]))

            # Hi·ªÉn th·ªã t√™n file v√† sheet hi·ªán t·∫°i
            st.subheader(f"üìë {file_name} - {sheet_name}")
            # Hi·ªÉn th·ªã th√¥ng tin c·ªôt ho·∫∑c d√≤ng ƒë·∫ßu t√πy tr∆∞·ªùng h·ª£p
            if header_present:
                st.write("C√°c c·ªôt ti√™u ƒë·ªÅ t√¨m th·∫•y:", list(df.columns))
            else:
                st.write("D√≤ng ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu (ƒë·ªÉ tham kh·∫£o c√°c c·ªôt):")
                st.json(df.head(1).to_dict(orient='records'))

            # T·ª± ƒë·ªông g·ª£i √Ω mapping c·ªôt theo ti√™u ƒë·ªÅ/d·ªØ li·ªáu
            name_col = phone_col = addr_col = product_col = size_col = cod_col = qty_col = weight_col = note_col = order_col = None
            if header_present:
                for col in df.columns:
                    col_str = str(col)
                    col_lower = remove_accents(col_str).lower()
                    # M√£ ƒë∆°n h√†ng (∆∞u ti√™n nh·∫≠n di·ªán tr∆∞·ªõc v√¨ ch·ª©a t·ª´ 'h√†ng')
                    if any(x in col_lower for x in ["m√£", "ma ", "code", "ƒë∆°n h√†ng", "don hang", "order"]):
                        order_col = col
                        continue
                    # H·ªç t√™n
                    if any(x in col_lower for x in ["h·ªç t√™n", "ho ten", "ten nguoi", "t√™n nguoi", "ten kh", "t√™n kh", "khach", "ng∆∞·ªùi nh·∫≠n", "nguoi nhan", "name"]):
                        if not ("s·∫£n" in col_lower or "hang" in col_lower or "h√†ng" in col_lower or "don hang" in col_lower):
                            name_col = col
                            continue
                    # S·ªë ƒëi·ªán tho·∫°i
                    if any(x in col_lower for x in ["sdt", "ƒëi·ªán tho", "dien tho", "phone", "mobile", "s·ªë ƒëi·ªán tho·∫°i", "so dt"]):
                        phone_col = col
                        continue
                    # ƒê·ªãa ch·ªâ
                    if any(x in col_lower for x in ["ƒë·ªãa ch·ªâ", "dia chi", "address", "ƒëc", "dc ", "ƒë/c"]):
                        addr_col = col
                        continue
                    # T√™n s·∫£n ph·∫©m/h√†ng h√≥a
                    if any(x in col_lower for x in ["s·∫£n ph·∫©m", "san pham", "t√™n h√†ng", "ten hang", "h√†ng h√≥a", "hang hoa", "sp "]):
                        product_col = col
                        continue
                    # Size / Ph√¢n lo·∫°i / M√†u s·∫Øc
                    if "size" in col_lower or "ph√¢n lo·∫°i" in col_lower or "phan loai" in col_lower or "m√†u" in col_lower or "mau" in col_lower:
                        size_col = col
                        continue
                    # Ti·ªÅn thu h·ªô (COD)
                    if "cod" in col_lower or "thu h·ªô" in col_lower or "thu ho" in col_lower or "ti·ªÅn thu" in col_lower or "tien thu" in col_lower:
                        cod_col = col
                        continue
                    # S·ªë l∆∞·ª£ng
                    if any(x in col_lower for x in ["s·ªë l∆∞·ª£ng", "so luong", "sl", "qty", "quantity"]):
                        qty_col = col
                        continue
                    # Kh·ªëi l∆∞·ª£ng
                    if any(x in col_lower for x in ["kh·ªëi l∆∞·ª£ng", "khoi luong", "gram", "tr·ªçng l∆∞·ª£ng", "trong luong", "weight"]):
                        weight_col = col
                        continue
                    # Ghi ch√∫
                    if any(x in col_lower for x in ["ghi ch√∫", "ghi chu", "note"]):
                        note_col = col
                        continue
            else:
                # N·∫øu kh√¥ng c√≥ header: g·ª£i √Ω theo v·ªã tr√≠ m·∫∑c ƒë·ªãnh
                if 2 in df.columns: name_col = 2
                if 3 in df.columns: phone_col = 3
                if 4 in df.columns: addr_col = 4
                if 5 in df.columns: product_col = 5
                if 6 in df.columns: size_col = 6
                if 7 in df.columns: cod_col = 7
                # C·ªôt 1 th∆∞·ªùng l√† s·ªë l∆∞·ª£ng (n·∫øu to√†n s·ªë)
                if 1 in df.columns:
                    col1_vals = df[1].dropna()
                    if len(col1_vals) > 0 and pd.to_numeric(col1_vals, errors='coerce').notna().mean() > 0.9:
                        qty_col = 1
                # C·ªôt 0 c√≥ th·ªÉ l√† m√£ ƒë∆°n h√†ng n·∫øu kh√¥ng ph·∫£i to√†n s·ªë
                if 0 in df.columns:
                    col0_vals = df[0].astype(str).fillna("")
                    if not pd.to_numeric(col0_vals, errors='coerce').notna().all():
                        order_col = 0

            # T·∫°o danh s√°ch l·ª±a ch·ªçn cho c√°c c·ªôt
            options = []
            for col in df.columns:
                if header_present:
                    label = str(col)
                else:
                    label = f"C·ªôt {col+1}" if isinstance(col, int) else f"C·ªôt {col}"
                options.append(label)
            label_to_col = {options[i]: df.columns[i] for i in range(len(df.columns))}
            placeholder_option = "- Ch·ªçn -"

            # Danh s√°ch c√°c tr∆∞·ªùng c·∫ßn map (t√™n tr∆∞·ªùng, c·ªôt g·ª£i √Ω, b·∫Øt bu·ªôc hay kh√¥ng)
            fields = [
                ("h·ªç t√™n", name_col, True),
                ("s·ªë ƒëi·ªán tho·∫°i", phone_col, True),
                ("ƒë·ªãa ch·ªâ", addr_col, True),
                ("t√™n h√†ng", product_col, True),
                ("size", size_col, True),
                ("ti·ªÅn thu h·ªô (COD)", cod_col, True),
                ("s·ªë l∆∞·ª£ng", qty_col, False),
                ("kh·ªëi l∆∞·ª£ng (gram)", weight_col, False),
                ("ghi ch√∫", note_col, False),
                ("m√£ ƒë∆°n h√†ng", order_col, False)
            ]

            # Hi·ªÉn th·ªã c√°c selectbox cho mapping
            selected_cols = {}
            for field_label, suggested_col, required in fields:
                opts = [placeholder_option] + options if not required else options
                default_index = 0
                if suggested_col is not None:
                    for lab, colval in label_to_col.items():
                        if colval == suggested_col:
                            if required:
                                default_index = options.index(lab)
                            else:
                                default_index = opts.index(lab) if lab in opts else 0
                            break
                # T·∫°o selectbox cho tr∆∞·ªùng
                choice = st.selectbox(f"Ch·ªçn c·ªôt cho '{field_label}'", options=opts, index=default_index, key=f"{file_name}_{sheet_name}_{field_label}")
                if choice == placeholder_option or choice is None:
                    selected_cols[field_label] = None
                else:
                    selected_cols[field_label] = label_to_col[choice]

            # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
            dataset_mapped = True
            for field_label, _, required in fields:
                if required and selected_cols.get(field_label) is None:
                    dataset_mapped = False
                    all_mapped = False
                    st.error(f"‚ö†Ô∏è Ch∆∞a ch·ªçn c·ªôt cho tr∆∞·ªùng b·∫Øt bu·ªôc: {field_label}")
            # N·∫øu t·∫•t c·∫£ tr∆∞·ªùng b·∫Øt bu·ªôc ƒë√£ c√≥, t·∫°o DataFrame k·∫øt qu·∫£ cho sheet n√†y
            if dataset_mapped:
                out_df = pd.DataFrame()
                out_df["H·ªç t√™n"] = df[selected_cols["h·ªç t√™n"]].astype(str).fillna("")
                # S·ªë ƒëi·ªán tho·∫°i d·∫°ng text (gi·ªØ c√°c s·ªë 0 ƒë·∫ßu n·∫øu c√≥)
                out_df["S·ªë ƒëi·ªán tho·∫°i"] = df[selected_cols["s·ªë ƒëi·ªán tho·∫°i"]].apply(lambda x: str(x).split('.')[0] if pd.notna(x) else "")
                out_df["ƒê·ªãa ch·ªâ"] = df[selected_cols["ƒë·ªãa ch·ªâ"]].astype(str).fillna("")
                out_df["T√™n h√†ng"] = df[selected_cols["t√™n h√†ng"]].astype(str).fillna("")
                out_df["Size"] = df[selected_cols["size"]].astype(str).fillna("")
                # X·ª≠ l√Ω COD: lo·∫°i b·ªè d·∫•u ph·∫©y/ch·∫•m v√† chuy·ªÉn th√†nh s·ªë int
                cod_series = df[selected_cols["ti·ªÅn thu h·ªô (COD)"]]
                cod_cleaned = cod_series.apply(lambda x: str(x).replace(",", "").replace(".", "") if pd.notna(x) else "0")
                out_df["S·ªë ti·ªÅn thu h·ªô (COD)"] = pd.to_numeric(cod_cleaned, errors='coerce').fillna(0).astype(int)
                # S·ªë l∆∞·ª£ng
                if selected_cols.get("s·ªë l∆∞·ª£ng") is not None:
                    qty_series = df[selected_cols["s·ªë l∆∞·ª£ng"]]
                    qty_cleaned = pd.to_numeric(qty_series, errors='coerce').fillna(1).astype(int)
                    out_df["S·ªë l∆∞·ª£ng"] = qty_cleaned
                else:
                    out_df["S·ªë l∆∞·ª£ng"] = 1
                # Kh·ªëi l∆∞·ª£ng (gram)
                if selected_cols.get("kh·ªëi l∆∞·ª£ng (gram)") is not None:
                    wt_series = df[selected_cols["kh·ªëi l∆∞·ª£ng (gram)"]]
                    wt_cleaned = pd.to_numeric(wt_series, errors='coerce').fillna(default_weight).astype(int)
                    out_df["Kh·ªëi l∆∞·ª£ng (gram)"] = wt_cleaned
                else:
                    out_df["Kh·ªëi l∆∞·ª£ng (gram)"] = int(default_weight) if default_weight is not None else 0
                # Ghi ch√∫
                if selected_cols.get("ghi ch√∫") is not None:
                    out_df["Ghi ch√∫"] = df[selected_cols["ghi ch√∫"]].astype(str).fillna("")
                else:
                    out_df["Ghi ch√∫"] = ""
                # M√£ ƒë∆°n h√†ng
                if selected_cols.get("m√£ ƒë∆°n h√†ng") is not None:
                    out_df["M√£ ƒë∆°n h√†ng"] = df[selected_cols["m√£ ƒë∆°n h√†ng"]].astype(str).fillna("")
                else:
                    out_df["M√£ ƒë∆°n h√†ng"] = ""
                # Th√™m k·∫øt qu·∫£ c·ªßa sheet v√†o danh s√°ch chung
                combined_output.append(out_df)
                # Hi·ªÉn th·ªã xem tr∆∞·ªõc 5 d√≤ng ƒë·∫ßu c·ªßa k·∫øt qu·∫£ chu·∫©n h√≥a
                st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu xu·∫•t (5 h√†ng ƒë·∫ßu):")
                st.dataframe(out_df.head())
            # N·∫øu ch∆∞a map ƒë·ªß, b·ªè qua sheet n√†y (ƒë√£ hi·ªÉn th·ªã c·∫£nh b√°o ·ªü tr√™n)

    # Sau khi x·ª≠ l√Ω t·∫•t c·∫£ file/sheet, n·∫øu t·∫•t c·∫£ ƒë·ªÅu ƒë√£ map xong:
    if combined_output and all_mapped:
        final_df = pd.concat(combined_output, ignore_index=True)
        st.subheader("K·∫øt qu·∫£ t·ªïng h·ª£p")
        st.dataframe(final_df)
        # Xu·∫•t file Excel chu·∫©n GHN
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            final_df.to_excel(writer, index=False, sheet_name="GHN_Output")
        processed_data = output.getvalue()
        st.download_button(
            label="T·∫£i xu·ªëng file GHN.xlsx",
            data=processed_data,
            file_name="GHN_output.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    elif not all_mapped:
        st.warning("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc tr∆∞·ªõc khi t·∫£i xu·ªëng.")
