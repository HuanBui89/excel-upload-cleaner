import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="GHN Upload Tool", layout="wide")
st.title("üì¶ GHN Excel Upload - Auto + Manual Column Mapping (Multi-Sheet)")

# Ch·ªçn m·∫´u xu·∫•t file
export_mode = st.radio("Ch·ªçn ki·ªÉu xu·∫•t file:", ["M·∫´u 1 - Ch·ªã Ti·ªÅn", "M·∫´u 2 - Ch·ªã Linh"], horizontal=True)
color_style = "background-color:#dff0d8;" if "M·∫´u 1" in export_mode else "background-color:#f2dede;"
st.markdown(f"<div style='{color_style}padding:10px;border-radius:5px;font-weight:bold;'>{export_mode}</div>", unsafe_allow_html=True)

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "h·ªç", "t√™n", "kh√°ch h√†ng"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "sƒët", "ƒëi·ªán", "mobile"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa ch·ªâ", "ƒë·ªãa", "dc"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "g·ªìm", "sp", "t√™n h√†ng"],
        "size": ["ghi ch√∫", "m√¥ t·∫£", "size"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "ti·ªÅn"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

uploaded_files = st.file_uploader("T·∫£i l√™n file .xlsx ho·∫∑c .csv", accept_multiple_files=True)

if uploaded_files:
    all_data = []

    for file in uploaded_files:
        ext = file.name.split(".")[-1].lower()

        try:
            if ext == "xlsx":
                xls = pd.ExcelFile(file)
                sheet_names = xls.sheet_names
            else:
                sheet_names = [None]  # only one for CSV

            for sheet_name in sheet_names:
                df_temp = pd.read_excel(file, sheet_name=sheet_name, header=None) if ext == "xlsx" else pd.read_csv(file, header=None)
                first_row = df_temp.iloc[0].astype(str)
                numeric_count = sum([cell.strip().replace('.', '', 1).isdigit() for cell in first_row])

                if numeric_count >= len(first_row) - 2:
                    df = df_temp.copy()
                    df.columns = [f"C·ªôt {i+1}" for i in range(df.shape[1])]
                    auto_mapping = {
                        "h·ªç t√™n": df.columns[2] if len(df.columns) > 2 else None,
                        "s·ªë ƒëi·ªán tho·∫°i": df.columns[3] if len(df.columns) > 3 else None,
                        "ƒë·ªãa ch·ªâ": df.columns[4] if len(df.columns) > 4 else None,
                        "t√™n h√†ng": df.columns[5] if len(df.columns) > 5 else None,
                        "size": df.columns[6] if len(df.columns) > 6 else None,
                        "s·ªë ti·ªÅn thu h·ªô": df.columns[7] if len(df.columns) > 7 else None
                    }
                else:
                    df = df_temp[1:].copy()
                    df.columns = first_row
                    auto_mapping = auto_map_columns(df.columns.tolist())

                required_fields = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"]
                final_mapping = {}

                for field in required_fields:
                    if auto_mapping.get(field):
                        final_mapping[field] = auto_mapping[field]
                    else:
                        final_mapping[field] = st.selectbox(
                            f"Ch·ªçn c·ªôt cho '{field.capitalize()}'",
                            options=df.columns.tolist(),
                            key=field + str(sheet_name) + file.name
                        )

                df["t√™n s·∫£n ph·∫©m"] = df[final_mapping["t√™n h√†ng"]].astype(str) + " Size " + df[final_mapping["size"]].astype(str)

                df_processed = pd.DataFrame({
                    "T√™n ng∆∞·ªùi nh·∫≠n": df[final_mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i": df[final_mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "ƒê·ªãa ch·ªâ": df[final_mapping["\u0111·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "Kh·ªëi l∆∞·ª£ng (Gram)": 500,
                    "Chi·ªÅu d√†i (cm)": 10,
                    "Chi·ªÅu r·ªông (cm)": 10,
                    "Chi·ªÅu cao (cm)": 10,
                    "Khai gi√°": "x",
                    "Gi√° tr·ªã h√†ng ho√°": df[final_mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ship": "x",
                    "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                    "M√£ ƒë∆°n h√†ng ri√™ng": "",
                    "S·∫£n ph·∫©m": df["t√™n s·∫£n ph·∫©m"],
                    "Ghi ch√∫ th√™m": "",
                    "Ca l·∫•y": 1,
                    "Giao h√†ng th·∫•t b·∫°i thu ti·ªÅn": 30000
                })

                if export_mode == "M·∫´u 2 - Ch·ªã Linh":
                    df_processed.reset_index(inplace=True, drop=True)
                    df_processed["T√™n ng∆∞·ªùi nh·∫≠n"] = df_processed.index + 1
                    df_processed["T√™n ng∆∞·ªùi nh·∫≠n"] = df_processed["T√™n ng∆∞·ªùi nh·∫≠n"].astype(str) + "_" + df[final_mapping["h·ªç t√™n"]]
                    df_processed["Ghi ch√∫ th√™m"] = df["t√™n s·∫£n ph·∫©m"] + " + KH√ÅCH KH√îNG NH·ªåN THU 30K, G·ªåI V·ªÄ SHOP KHI ƒê∆Ø·ª¢N SAI TH√îNG TIN"

                all_data.append(df_processed)

        except Exception as e:
            st.error(f"‚ùå L·ªói ƒë·ªçc file {file.name}: {e}")

    if all_data:
        final = pd.concat(all_data, ignore_index=True)
        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng t·∫•t c·∫£ file v√† sheet!")
        st.dataframe(final)

        towrite = io.BytesIO()
        final.to_excel(towrite, index=False, engine="openpyxl")
        st.download_button("üìÖ T·∫£i file GHN", data=towrite.getvalue(), file_name="GHN_output.xlsx")
