import streamlit as st
import pandas as pd
from openpyxl import load_workbook
from tempfile import NamedTemporaryFile
from datetime import datetime
import io

st.set_page_config(page_title="GHN Upload Tool", layout="wide")
st.title("üì¶ GHN Excel Upload - Auto Mapping + Chu·∫©n File M·∫´u GHN")

template_option = st.radio("üéØ Ch·ªçn m·∫´u xu·∫•t file", ["M·∫´u 1 (Ch·ªã Ti·ªÅn)", "M·∫´u 2 (Ch·ªã Linh)"], index=1)
uploaded_files = st.file_uploader("üì§ T·∫£i l√™n file Excel (.xlsx)", type=["xlsx"], accept_multiple_files=True)

def auto_map_columns(columns):
    keywords = {
        "h·ªç t√™n": ["h·ªç", "t√™n", "kh√°ch"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "s·ªë ƒëi·ªán tho·∫°i", "mobile"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa ch·ªâ", "ph∆∞·ªùng", "qu·∫≠n", "ƒë∆∞·ªùng"],
        "t√™n h√†ng": ["t√™n h√†ng", "s·∫£n ph·∫©m"],
        "size": ["size", "k√≠ch th∆∞·ªõc", "ghi ch√∫"],
        "s·ªë ti·ªÅn thu h·ªô": ["ti·ªÅn", "thu h·ªô", "cod"]
    }
    mapping = {}
    for key, keys in keywords.items():
        for col in columns:
            if any(k in str(col).lower() for k in keys):
                mapping[key] = col
                break
    return mapping

if uploaded_files:
    all_data = []
    seen_files = set()
    duplicate_files = set()

    for file in uploaded_files:
        if file.name in seen_files:
            duplicate_files.add(file.name)
            continue
        seen_files.add(file.name)

        try:
            xls = pd.ExcelFile(file)
            for sheet in xls.sheet_names:
                df_raw = pd.read_excel(xls, sheet_name=sheet, header=None)
                header = df_raw.iloc[0].astype(str)
                df = df_raw[1:].copy()
                df.columns = header

                mapping = auto_map_columns(df.columns)
                required = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"]
                if not all(k in mapping for k in required):
                    st.error(f"‚ùå Thi·∫øu c·ªôt trong file {file.name}, sheet {sheet}")
                    continue

                df["T√™n s·∫£n ph·∫©m"] = df[mapping["t√™n h√†ng"]].astype(str) + " Size " + df[mapping["size"]].astype(str)
                df["Ghi ch√∫ th√™m"] = ""
                if template_option == "M·∫´u 2 (Ch·ªã Linh)":
                    df["Ghi ch√∫ th√™m"] = df["T√™n s·∫£n ph·∫©m"] + " - KH√ÅCH KH√îNG NH·∫¨N THU 30K, G·ªåI V·ªÄ SHOP KHI ƒê∆†N SAI TH√îNG TIN"

                new_df = pd.DataFrame({
                    "T√™n ng∆∞·ªùi nh·∫≠n": df[mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i": df[mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "S·ªë nh√†/ng√µ/ng√°ch/h·∫ªm, ƒê∆∞·ªùng/Ph·ªë, Ph∆∞·ªùng/X√£, Qu·∫≠n/Huy·ªán, T·ªânh/Th√†nh": df[mapping["ƒë·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Ti·ªÅn thu h·ªô": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "Kh·ªëi l∆∞·ª£ng (gram)": 500,
                    "Chi·ªÅu d√†i (cm)": 10,
                    "Chi·ªÅu r·ªông (cm)": 10,
                    "Chi·ªÅu cao (cm)": 10,
                    "Khai gi√°": "x",
                    "Gi√° tr·ªã h√†ng h√≥a": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ship": "x",
                    "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                    "M√£ ƒë∆°n h√†ng ri√™ng": "",
                    "S·∫£n ph·∫©m": df["T√™n s·∫£n ph·∫©m"],
                    "Ghi ch√∫ th√™m": df["Ghi ch√∫ th√™m"],
                    "Ca l·∫•y": 1,
                    "Giao h√†ng th·∫•t b·∫°i thu ti·ªÅn": 30000
                })

                all_data.append(new_df)
        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω file {file.name}: {e}")

    if duplicate_files:
        st.warning(f"‚ö†Ô∏è C√≥ file tr√πng t√™n b·ªã b·ªè qua: {', '.join(duplicate_files)}")

    if all_data:
        final = pd.concat(all_data, ignore_index=True)

        if template_option == "M·∫´u 2 (Ch·ªã Linh)":
            final["T√™n ng∆∞·ªùi nh·∫≠n"] = [f"{i+1}_{name}" for i, name in enumerate(final["T√™n ng∆∞·ªùi nh·∫≠n"])]

        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng! Xem tr∆∞·ªõc d·ªØ li·ªáu:")
        st.dataframe(final)

        # Load file m·∫´u
        try:
            template_path = "GHN_FileMauChuyenPhat_HangNhe_2023 (11).xlsx"
            wb = load_workbook(template_path)
            ws = wb.active

            for row in final.itertuples(index=False, name=None):
                ws.append(row)

            with NamedTemporaryFile(delete=False, suffix=".xlsx") as f:
                wb.save(f.name)
                f.seek(0)
                st.download_button("üì• T·∫£i file GHN", data=f.read(), file_name="GHN_output.xlsx")
        except Exception as e:
            st.error(f"‚ùå L·ªói xu·∫•t file: {e}")

        # T√°ch n·∫øu m·∫´u 2 > 300
        if template_option == "M·∫´u 2 (Ch·ªã Linh)" and len(final) > 300:
            st.subheader("üìÇ T√°ch file GHN th√†nh t·ª´ng 300 ƒë∆°n")
            try:
                for i in range(0, len(final), 300):
                    chunk = final.iloc[i:i+300]
                    wb = load_workbook(template_path)
                    ws = wb.active
                    for row in chunk.itertuples(index=False, name=None):
                        ws.append(row)

                    today = datetime.today().strftime("%-d.%-m")
                    start = i + 1
                    end = i + len(chunk)
                    filename = f"GHN_{today}_SHOP TUONG VY_TOI {start}-{end}.xlsx"

                    with NamedTemporaryFile(delete=False, suffix=".xlsx") as f:
                        wb.save(f.name)
                        f.seek(0)
                        st.download_button(f"üìé T·∫£i file {filename}", data=f.read(), file_name=filename)
            except Exception as e:
                st.error(f"‚ùå L·ªói khi t√°ch file: {e}")
