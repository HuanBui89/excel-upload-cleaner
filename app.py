import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="GHN Upload Tool", layout="wide")
st.title("üì¶ GHN Excel Upload - Auto + Manual Column Mapping (Multi-Sheet)")

# T√πy ch·ªçn m·∫´u xu·∫•t
mau_xuat = st.radio("Ch·ªçn m·∫´u xu·∫•t file:", ["M·∫´u 1 - Ch·ªã Ti·ªÅn", "M·∫´u 2 - Ch·ªã Linh"], index=1,
                    help="M·∫´u 1: Kh√¥ng thay ƒë·ªïi t√™n ng∆∞·ªùi nh·∫≠n | M·∫´u 2: ƒê√°nh s·ªë th·ª© t·ª± + th√™m ghi ch√∫")

# √Ånh x·∫° t·ª± ƒë·ªông

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "h·ªç", "t√™n", "kh√°ch h√†ng"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "sƒët", "ƒëi·ªán", "mobile"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa ch·ªâ", "ƒë·ªãa", "dc"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "g·ªìm", "sp", "t√™n h√†ng"],
        "size": ["ghi ch√∫", "m√¥ t·∫£", "size"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "ti·ªÅn"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

uploaded_files = st.file_uploader("T·∫£i l√™n file .xlsx ho·∫∑c .csv", accept_multiple_files=True)

if uploaded_files:
    all_data = []
    record_tracking = []

    for file in uploaded_files:
        ext = file.name.split(".")[-1].lower()

        try:
            if ext == "xlsx":
                xls = pd.ExcelFile(file)
                sheet_names = xls.sheet_names
            else:
                sheet_names = [None]  # only one for CSV

            for sheet_name in sheet_names:
                df_temp = pd.read_excel(file, sheet_name=sheet_name, header=None) if ext == "xlsx" else pd.read_csv(file, header=None)
                first_row = df_temp.iloc[0].astype(str)
                numeric_count = sum([cell.strip().replace('.', '', 1).isdigit() for cell in first_row])

                if numeric_count >= len(first_row) - 2:
                    df = df_temp.copy()
                    df.columns = [f"C·ªôt {i+1}" for i in range(df.shape[1])]
                    auto_mapping = {
                        "h·ªç t√™n": df.columns[2] if len(df.columns) > 2 else None,
                        "s·ªë ƒëi·ªán tho·∫°i": df.columns[3] if len(df.columns) > 3 else None,
                        "ƒë·ªãa ch·ªâ": df.columns[4] if len(df.columns) > 4 else None,
                        "t√™n h√†ng": df.columns[5] if len(df.columns) > 5 else None,
                        "size": df.columns[6] if len(df.columns) > 6 else None,
                        "s·ªë ti·ªÅn thu h·ªô": df.columns[7] if len(df.columns) > 7 else None
                    }
                else:
                    df = df_temp[1:].copy()
                    df.columns = first_row
                    auto_mapping = auto_map_columns(df.columns.tolist())

                st.subheader(f"üîé Sheet: {sheet_name if sheet_name else 'CSV'}")
                st.write("üìã C√°c c·ªôt:")
                st.write(df.iloc[0].to_dict())

                required_fields = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"]
                final_mapping = {}

                for field in required_fields:
                    if auto_mapping.get(field):
                        final_mapping[field] = auto_mapping[field]
                    else:
                        final_mapping[field] = st.selectbox(
                            f"Ch·ªçn c·ªôt cho '{field.capitalize()}'",
                            options=df.columns.tolist(),
                            key=field + str(sheet_name) + file.name
                        )

                df["t√™n s·∫£n ph·∫©m"] = df[final_mapping["t√™n h√†ng"]].astype(str) + " Size " + df[final_mapping["size"]].astype(str)

                df_new = pd.DataFrame({
                    "H·ªç t√™n ng∆∞·ªùi nh·∫≠n": df[final_mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n": df[final_mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "ƒê·ªãa ch·ªâ": df[final_mapping["ƒë·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Ti·ªÅn thu h·ªô": df[final_mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "Kh·ªëi l∆∞·ª£ng (gram)": 500,
                    "Chi·ªÅu d√†i (cm)": 10,
                    "Chi·ªÅu r·ªông (cm)": 10,
                    "Chi·ªÅu cao (cm)": 10,
                    "Khai gi√°": "x",
                    "Gi√° tr·ªã h√†ng ho√°": df[final_mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ship": "x",
                    "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                    "M√£ ƒë∆°n h√†ng ri√™ng": "",
                    "S·∫£n ph·∫©m": df["t√™n s·∫£n ph·∫©m"],
                    "Ghi ch√∫ th√™m": "",
                    "Ca l·∫•y": 1,
                    "Giao h√†ng th·∫•t b·∫°i thu ti·ªÅn": 30000
                })

                record_tracking.append(df_new)

        except Exception as e:
            st.error(f"‚ùå L·ªói ƒë·ªçc file {file.name}: {e}")

    if record_tracking:
        final = pd.concat(record_tracking, ignore_index=True)

        # Lo·∫°i b·ªè d√≤ng tr√πng
        duplicates = final.duplicated(subset=["H·ªç t√™n ng∆∞·ªùi nh·∫≠n", "S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n", "ƒê·ªãa ch·ªâ"], keep=False)
        dup_df = final[duplicates]
        if not dup_df.empty:
            st.warning("‚ö†Ô∏è Ph√°t hi·ªán ƒë∆°n h√†ng tr√πng l·∫∑p!")
            st.dataframe(dup_df)

        if mau_xuat == "M·∫´u 2 - Ch·ªã Linh":
            final.insert(0, "STT", range(1, len(final) + 1))
            final["H·ªç t√™n ng∆∞·ªùi nh·∫≠n"] = final["STT"].astype(str) + "_" + final["H·ªç t√™n ng∆∞·ªùi nh·∫≠n"].astype(str)
            final["Ghi ch√∫ th√™m"] = final["S·∫£n ph·∫©m"] + " - KH√ÅCH KH√îNG NH·∫¨N THU 30K, G·ªåI V·ªÄ SHOP KHI ƒê∆†N SAI TH√îNG TIN"
            st.success("‚úÖ Xu·∫•t theo M·∫´u 2 - Ch·ªã Linh")
        else:
            st.success("‚úÖ Xu·∫•t theo M·∫´u 1 - Ch·ªã Ti·ªÅn")

        st.dataframe(final)

        towrite = io.BytesIO()
        final.to_excel(towrite, index=False, engine="openpyxl")
        st.download_button("üì• T·∫£i file GHN", data=towrite.getvalue(), file_name="GHN_output.xlsx")
