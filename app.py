import streamlit as st
import pandas as pd
import io
from datetime import datetime
from openpyxl import load_workbook

st.set_page_config(page_title="GHN Upload Tool", layout="wide")
st.title("üì¶ GHN Excel Upload - Chu·∫©n GHN Template")

template_option = st.radio("Ch·ªçn m·∫´u xu·∫•t k·∫øt qu·∫£:", options=["M·∫´u 1 - Ch·ªã Ti·ªÅn", "M·∫´u 2 - Ch·ªã Linh"], index=1)

uploaded_files = st.file_uploader("T·∫£i l√™n file .xlsx ho·∫∑c .csv", accept_multiple_files=True)
template_file = "GHN_FileMauChuyenPhat_HangNhe_2023 (11).xlsx"

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "h·ªç", "t√™n"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "ƒëi·ªán tho·∫°i"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa", "ph∆∞·ªùng", "qu·∫≠n"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "t√™n h√†ng", "√°o"],
        "size": ["size", "m√¥ t·∫£"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "gi√°"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

if uploaded_files:
    all_data = []
    filenames = set()
    duplicated_files = set()

    for file in uploaded_files:
        if file.name in filenames:
            duplicated_files.add(file.name)
            continue
        filenames.add(file.name)

        try:
            df_temp = pd.read_excel(file, header=None)
            first_row = df_temp.iloc[0].astype(str)
            df = df_temp[1:].copy()
            df.columns = first_row

            mapping = auto_map_columns(df.columns.tolist())

            if template_option == "M·∫´u 2 - Ch·ªã Linh":
                df["H·ªç t√™n ng∆∞·ªùi nh·∫≠n"] = df[mapping["h·ªç t√™n"]].astype(str)
                df["Ghi ch√∫ th√™m"] = df[mapping["t√™n h√†ng"]].astype(str) + " - KH√ÅCH KH√îNG NH·∫¨N THU 30K, G·ªåI V·ªÄ SHOP KHI ƒê∆†N SAI TH√îNG TIN"
            else:
                df["H·ªç t√™n ng∆∞·ªùi nh·∫≠n"] = df[mapping["h·ªç t√™n"]]
                df["Ghi ch√∫ th√™m"] = ""

            df_final = pd.DataFrame({
                "T√™n ng∆∞·ªùi nh·∫≠n": df["H·ªç t√™n ng∆∞·ªùi nh·∫≠n"],
                "S·ªë ƒëi·ªán tho·∫°i": df[mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                "S·ªë nh√†/ng√µ/h·∫ªm, ƒê∆∞·ªùng/Ph·ªë, Ph∆∞·ªùng/X√£, Qu·∫≠n/Huy·ªán, T·ªânh/Th√†nh": df[mapping["ƒë·ªãa ch·ªâ"]],
                "G√≥i c∆∞·ªõc": 2,
                "Ti·ªÅn thu h·ªô": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                "Kh·ªëi l∆∞·ª£ng (gram)": 500,
                "Chi·ªÅu d√†i (cm)": 10,
                "Chi·ªÅu r·ªông (cm)": 10,
                "Chi·ªÅu cao (cm)": 10,
                "Khai gi√°": "x",
                "Gi√° tr·ªã h√†ng h√≥a": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                "Shop tr·∫£ ship": "x",
                "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                "M√£ ƒë∆°n h√†ng ri√™ng": "",
                "S·∫£n ph·∫©m": df[mapping["t√™n h√†ng"]],
                "Ghi ch√∫ th√™m": df["Ghi ch√∫ th√™m"],
                "Ca l·∫•y": 1,
                "Giao h√†ng th·∫•t b·∫°i thu ti·ªÅn": 30000
            })

            all_data.append(df_final)

        except Exception as e:
            st.error(f"‚ùå L·ªói ƒë·ªçc file {file.name}: {e}")

    if duplicated_files:
        st.warning(f"‚ö†Ô∏è C√≥ file tr√πng t√™n b·ªã b·ªè qua: {', '.join(duplicated_files)}")

    if all_data:
        final_df = pd.concat(all_data, ignore_index=True)
        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng! Xem tr∆∞·ªõc d·ªØ li·ªáu:")
        st.dataframe(final_df)

        if not final_df.empty:
            output = io.BytesIO()
            try:
                template_wb = load_workbook(template_file)
                with pd.ExcelWriter(output, engine="openpyxl") as writer:
                    writer.book = template_wb
                    writer.sheets = {ws.title: ws for ws in template_wb.worksheets}
                    final_df.to_excel(writer, sheet_name=template_wb.active.title, index=False, header=False, startrow=4)
                output.seek(0)

                st.download_button("üì• T·∫£i file GHN", data=output, file_name="GHN_output.xlsx")
            except Exception as e:
                st.error(f"L·ªói khi ghi file Excel: {e}")
        else:
            st.warning("‚ö†Ô∏è D·ªØ li·ªáu r·ªóng, kh√¥ng th·ªÉ xu·∫•t file Excel.")

        if template_option == "M·∫´u 2 - Ch·ªã Linh" and len(final_df) > 300:
            st.subheader("üìÇ T√°ch file GHN th√†nh t·ª´ng 300 ƒë∆°n")
            today = datetime.today().strftime("%-d.%-m")
            for i in range(0, len(final_df), 300):
                chunk = final_df.iloc[i:i+300]
                chunk_output = io.BytesIO()
                try:
                    wb = load_workbook(template_file)
                    with pd.ExcelWriter(chunk_output, engine="openpyxl") as writer:
                        writer.book = wb
                        writer.sheets = {ws.title: ws for ws in wb.worksheets}
                        chunk.to_excel(writer, sheet_name=wb.active.title, index=False, header=False, startrow=4)
                    chunk_output.seek(0)
                    file_name = f"GHN_{today}_SHOP TUONG VY_TOI {i+1}-{i+len(chunk)}.xlsx"
                    st.download_button(f"üì• T·∫£i {file_name}", data=chunk_output, file_name=file_name)
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi t√°ch file t·ª´ {i+1}-{i+len(chunk)}: {e}")
