import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="GHN Excel Upload", layout="wide")
st.title("üì¶ GHN Excel Upload - Auto + Manual Column Mapping (Multi-Sheet)")

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "h·ªç", "t√™n", "kh√°ch h√†ng"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "sƒët", "ƒëi·ªán", "mobile"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa ch·ªâ", "ƒë·ªãa", "dc"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "g·ªìm", "sp", "t√™n h√†ng"],
        "size": ["ghi ch√∫", "m√¥ t·∫£", "size"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "ti·ªÅn"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

uploaded_files = st.file_uploader("üìÅ T·∫£i l√™n file .xlsx", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    all_data = []

    for file in uploaded_files:
        xls = pd.ExcelFile(file)
        for sheet_name in xls.sheet_names:
            df_raw = pd.read_excel(file, sheet_name=sheet_name, header=None)
            first_row = df_raw.iloc[0].astype(str)
            numeric_count = sum(cell.strip().replace(".", "", 1).isdigit() for cell in first_row)

            # N·∫øu kh√¥ng c√≥ ti√™u ƒë·ªÅ
            if numeric_count >= len(first_row) // 2:
                df = df_raw.copy()
                df.columns = [f"C·ªôt {i+1}" for i in range(df.shape[1])]

                mapping = {
                    "h·ªç t√™n": df.columns[2],
                    "s·ªë ƒëi·ªán tho·∫°i": df.columns[3],
                    "ƒë·ªãa ch·ªâ": df.columns[4],
                    "t√™n h√†ng": df.columns[5],
                    "size": df.columns[6],
                    "s·ªë ti·ªÅn thu h·ªô": df.columns[7]
                }
                show_manual = False  # Kh√¥ng c·∫ßn ch·ªçn tay v√¨ v·ªã tr√≠ c·ªë ƒë·ªãnh
            else:
                df = df_raw[1:].copy()
                df.columns = first_row
                columns = df.columns.tolist()
                mapping = auto_map_columns(columns)
                show_manual = True

            st.markdown(f"### üìÑ Sheet: {sheet_name}")
            st.write("üìã C√°c c·ªôt:")
            st.write(df.columns.tolist())

            required_fields = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"]
            for field in required_fields:
                if field not in mapping:
                    mapping[field] = st.selectbox(
                        f"üîß Ch·ªçn c·ªôt cho '{field}'",
                        options=df.columns.tolist(),
                        key=field + sheet_name + file.name
                    )

            try:
                df["t√™n s·∫£n ph·∫©m"] = df[mapping["t√™n h√†ng"]].astype(str) + " Size " + df[mapping["size"]].astype(str)

                new_df = pd.DataFrame({
                    "H·ªç t√™n ng∆∞·ªùi nh·∫≠n": df[mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n": df[mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "ƒê·ªãa ch·ªâ": df[mapping["ƒë·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "T√™n s·∫£n ph·∫©m": df["t√™n s·∫£n ph·∫©m"],
                    "S·ªë l∆∞·ª£ng": 1,
                    "Kh·ªëi l∆∞·ª£ng (gram)": 500,
                    "Chi·ªÅu d√†i (cm)": 10,
                    "Chi·ªÅu r·ªông (cm)": 10,
                    "Chi·ªÅu cao (cm)": 10,
                    "Gi√° tr·ªã h√†ng h√≥a": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Khai gi√° (C√≥/Kh√¥ng)": "x",
                    "Ti·ªÅn thu h·ªô (COD)": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ph√≠ v·∫≠n chuy·ªÉn": "x",
                    "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                    "M√£ h√†ng ri√™ng c·ªßa shop": "",
                    "Ghi ch√∫ th√™m": "",
                    "Ca l·∫•y h√†ng": 1,
                    "Giao th·∫•t b·∫°i thu ti·ªÅn": 30000
                })

                all_data.append(new_df)
            except Exception as e:
                st.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file: {e}")

    if all_data:
        final = pd.concat(all_data, ignore_index=True)
        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng t·∫•t c·∫£ file v√† sheet!")
        st.dataframe(final)

        towrite = io.BytesIO()
        final.to_excel(towrite, index=False, engine="openpyxl")
        st.download_button("üì• T·∫£i file GHN", data=towrite.getvalue(), file_name="GHN_output.xlsx")
