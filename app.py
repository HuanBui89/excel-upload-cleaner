import streamlit as st
import pandas as pd
import io

st.title("üì¶ GHN Excel Upload - Auto + Manual Column Mapping (Multi-Sheet)")

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "h·ªç", "t√™n", "kh√°ch h√†ng"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "sƒët", "ƒëi·ªán", "mobile"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa ch·ªâ", "ƒë·ªãa", "dc"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "g·ªìm", "sp", "t√™n h√†ng"],
        "size": ["ghi ch√∫", "m√¥ t·∫£", "size"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "ti·ªÅn"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

uploaded_files = st.file_uploader("T·∫£i l√™n file .xlsx ho·∫∑c .csv", accept_multiple_files=True)

if uploaded_files:
    all_data = []

    for file in uploaded_files:
        ext = file.name.split(".")[-1].lower()

        try:
            if ext == "xlsx":
                xls = pd.ExcelFile(file)
                sheet_names = xls.sheet_names
            else:
                sheet_names = [None]  # only one for CSV
        
            for sheet_name in sheet_names:
                df_temp = pd.read_excel(file, sheet_name=sheet_name, header=None) if ext == "xlsx" else pd.read_csv(file, header=None)

                first_row = df_temp.iloc[0].astype(str)
                numeric_count = sum([cell.strip().replace('.', '', 1).isdigit() for cell in first_row])
                if numeric_count >= len(first_row) - 2:
                    df = df_temp.copy()
                    df.columns = [f"C·ªôt {i+1}" for i in range(df.shape[1])]
                else:
                    df = df_temp[1:].copy()
                    df.columns = first_row

                st.write(f"üìÑ Sheet: {sheet_name if sheet_name else 'CSV'}")
                st.write("üìã C√°c c·ªôt c√≥ trong file:", df.columns.tolist())

                columns = df.columns.tolist()
                mapping = auto_map_columns(columns)

                required_fields = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size"]
                missing = [f for f in required_fields if f not in mapping]

                if missing:
                    st.warning(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß c·ªôt ƒë∆∞·ª£c nh·∫≠n di·ªán trong sheet '{sheet_name}'. Vui l√≤ng ch·ªçn th·ªß c√¥ng:")
                    for field in required_fields:
                        mapping[field] = st.selectbox(f"üõ† Ch·ªçn c·ªôt cho '{field}'", options=columns, key=field+str(sheet_name)+file.name)

                if "s·ªë ti·ªÅn thu h·ªô" not in mapping:
                    mapping["s·ªë ti·ªÅn thu h·ªô"] = st.selectbox("üõ† Ch·ªçn c·ªôt cho 's·ªë ti·ªÅn thu h·ªô' (COD)", options=columns, key="cod"+str(sheet_name)+file.name)

                df["t√™n s·∫£n ph·∫©m"] = df[mapping["t√™n h√†ng"]].astype(str) + " Size " + df[mapping["size"]].astype(str)

                new_df = pd.DataFrame({
                    "H·ªç t√™n ng∆∞·ªùi nh·∫≠n": df[mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n": df[mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "ƒê·ªãa ch·ªâ": df[mapping["ƒë·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "T√™n s·∫£n ph·∫©m": df["t√™n s·∫£n ph·∫©m"],
                    "S·ªë l∆∞·ª£ng": 1,
                    "Kh·ªëi l∆∞·ª£ng (gram)": 500,
                    "Chi·ªÅu d√†i (cm)": 10,
                    "Chi·ªÅu r·ªông (cm)": 10,
                    "Chi·ªÅu cao (cm)": 10,
                    "Gi√° tr·ªã h√†ng h√≥a": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Khai gi√° (C√≥/Kh√¥ng)": "x",
                    "Ti·ªÅn thu h·ªô (COD)": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ph√≠ v·∫≠n chuy·ªÉn": "x",
                    "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                    "M√£ h√†ng ri√™ng c·ªßa shop": "",
                    "Ghi ch√∫ th√™m": "",
                    "Ca l·∫•y h√†ng": 1,
                    "Giao th·∫•t b·∫°i thu ti·ªÅn": 30000
                })

                all_data.append(new_df)

        except Exception as e:
            st.error(f"‚ùå L·ªói ƒë·ªçc file {file.name}: {e}")

    if all_data:
        final = pd.concat(all_data, ignore_index=True)
        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng t·∫•t c·∫£ file v√† sheet!")
        st.dataframe(final)

        towrite = io.BytesIO()
        final.to_excel(towrite, index=False, engine="openpyxl")
        st.download_button("üì• T·∫£i file GHN", data=towrite.getvalue(), file_name="GHN_output.xlsx")
