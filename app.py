import streamlit as st
import pandas as pd
import io
import hashlib
import os
from datetime import datetime

st.set_page_config(page_title="GHN Upload Tool", layout="wide")
st.title("üì¶ GHN Excel Upload - Auto + Manual Column Mapping (Multi-Sheet)")

log_file = "history_logs.csv"
if not os.path.exists(log_file):
    pd.DataFrame(columns=["Time", "Filename", "Total Orders"]).to_csv(log_file, index=False)

template_option = st.radio(
    "Ch·ªçn m·∫´u xu·∫•t k·∫øt qu·∫£:",
    options=["M·∫´u 1 - Ch·ªã Ti·ªÅn", "M·∫´u 2 - Ch·ªã Linh"],
    index=1,
    help="M·∫´u 1 gi·ªØ nguy√™n d·ªØ li·ªáu | M·∫´u 2 s·∫Ω th√™m t√™n + ƒë√°nh s·ªë + ghi ch√∫ ƒë·∫∑c bi·ªát"
)

uploaded_files = st.file_uploader("T·∫£i l√™n file .xlsx ho·∫∑c .csv", accept_multiple_files=True)

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "h·ªç", "t√™n", "kh√°ch h√†ng"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "sƒët", "ƒëi·ªán", "mobile"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa ch·ªâ", "ƒë·ªãa", "dc"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "g·ªìm", "sp", "t√™n h√†ng"],
        "size": ["ghi ch√∫", "m√¥ t·∫£", "size"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "ti·ªÅn"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

if uploaded_files:
    all_data = []
    filenames = set()
    duplicates = set()
    content_hashes = set()

    for file in uploaded_files:
        file_content = file.getvalue()
        file_hash = hashlib.md5(file_content).hexdigest()

        if file_hash in content_hashes:
            duplicates.add(file.name)
            continue
        else:
            content_hashes.add(file_hash)

        ext = file.name.split(".")[-1].lower()
        try:
            if ext == "xlsx":
                xls = pd.ExcelFile(file)
                sheets = xls.sheet_names
            else:
                sheets = [None]

            for sheet in sheets:
                df_temp = pd.read_excel(file, sheet_name=sheet, header=None) if ext == "xlsx" else pd.read_csv(file, header=None)
                first_row = df_temp.iloc[0].astype(str)
                numeric_count = sum([cell.strip().replace('.', '', 1).isdigit() for cell in first_row])

                if numeric_count >= len(first_row) - 2:
                    df = df_temp.copy()
                    df.columns = [f"C·ªôt {i+1}" for i in range(df.shape[1])]
                    auto_mapping = {key: df.columns[i+2] for i, key in enumerate(["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"])}
                else:
                    df = df_temp[1:].copy()
                    df.columns = first_row
                    auto_mapping = auto_map_columns(df.columns.tolist())

                required_fields = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"]
                final_mapping = {field: auto_mapping.get(field) or st.selectbox(
                    f"Ch·ªçn c·ªôt cho '{field}'", df.columns.tolist(), key=f"{field}_{sheet}_{file.name}") for field in required_fields}

                df["T√™n s·∫£n ph·∫©m"] = df[final_mapping["t√™n h√†ng"]].astype(str)
                df["Ghi ch√∫ th√™m"] = df[final_mapping["t√™n h√†ng"]].astype(str) + " Size " + df[final_mapping["size"]].astype(str) + \
                    " - KH√ÅCH KH√îNG NH·∫¨N THU 30K, G·ªåI V·ªÄ SHOP KHI ƒê∆†N SAI TH√îNG TIN" if template_option == "M·∫´u 2 - Ch·ªã Linh" else ""

                all_data.append(pd.DataFrame({
                    "T√™n ng∆∞·ªùi nh·∫≠n": df[final_mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i": df[final_mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "ƒê·ªãa ch·ªâ": df[final_mapping["ƒë·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Ti·ªÅn thu h·ªô": df[final_mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "Kh·ªëi l∆∞·ª£ng": 500,
                    "D√†i": 10, "R·ªông": 10, "Cao": 10,
                    "Khai gi√°": "x",
                    "Gi√° tr·ªã h√†ng": df[final_mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ship": "x", "B∆∞u c·ª•c": "", "M√£ ƒë∆°n ri√™ng": "",
                    "S·∫£n ph·∫©m": df["T√™n s·∫£n ph·∫©m"],
                    "Ghi ch√∫ th√™m": df["Ghi ch√∫ th√™m"],
                    "Ca l·∫•y": 1, "Giao th·∫•t b·∫°i thu": 30000
                }))

        except Exception as e:
            st.error(f"‚ùå L·ªói ƒë·ªçc file {file.name}: {e}")

    if duplicates:
        st.error(f"‚ö†Ô∏è File tr√πng n·ªôi dung b·ªã b·ªè qua: {', '.join(duplicates)}")

    if all_data:
        final = pd.concat(all_data, ignore_index=True)
        total_orders = len(final)

        if template_option == "M·∫´u 2 - Ch·ªã Linh":
            final["T√™n ng∆∞·ªùi nh·∫≠n"] = final.index + 1
            final["T√™n ng∆∞·ªùi nh·∫≠n"] = final["T√™n ng∆∞·ªùi nh·∫≠n"].astype(str) + "_" + final["T√™n ng∆∞·ªùi nh·∫≠n"]

        st.success(f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng! T·ªïng s·ªë ƒë∆°n: {total_orders}")
        st.dataframe(final)

        towrite = io.BytesIO()
        final.to_excel(towrite, index=False)
        st.download_button("üì• T·∫£i file GHN", data=towrite, file_name="GHN_output.xlsx")

        # L∆∞u v√†o log l·ªãch s·ª≠
        log_df = pd.read_csv(log_file)
        new_log = pd.DataFrame([[datetime.now(), ', '.join([f.name for f in uploaded_files]), total_orders]],
                               columns=["Time", "Filename", "Total Orders"])
        log_df = pd.concat([log_df, new_log])
        log_df.to_csv(log_file, index=False)

    # Xem l·ªãch s·ª≠
    with st.expander("üìú L·ªãch s·ª≠ 3 ng√†y g·∫ßn ƒë√¢y"):
        log_df = pd.read_csv(log_file)
        log_df["Time"] = pd.to_datetime(log_df["Time"])
        recent_log = log_df[log_df["Time"] >= pd.Timestamp.now() - pd.Timedelta(days=3)]
        st.dataframe(recent_log)

# CSS l·ªõn h∆°n v√† n·ªïi b·∫≠t
st.markdown("""
<style>
div[data-baseweb="radio"] label {padding:10px 20px; font-size:18px!important; font-weight:bold; border-radius:5px; border:2px solid #ccc; box-shadow:0 4px 8px rgba(0,0,0,0.2); margin-right:10px;}
div[data-baseweb="radio"] label:nth-child(1){background:#28a745!important;color:#fff;}
div[data-baseweb="radio"] label:nth-child(2){background:#dc3545!important;color:#fff;}
div[data-baseweb="radio"] label div:first-child{display:none!important;}
</style>
""", unsafe_allow_html=True)
