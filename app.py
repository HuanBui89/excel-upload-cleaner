import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="GHN Upload Tool", layout="wide")
st.title("üì¶ GHN Excel Upload - Auto + Manual Mapping + Multi-Sheet")

def auto_map_columns(columns):
    mapping = {}
    keywords = {
        "h·ªç t√™n": ["kh√°ch", "t√™n", "h·ªç", "ng∆∞·ªùi nh·∫≠n"],
        "s·ªë ƒëi·ªán tho·∫°i": ["sdt", "sƒët", "ƒëi·ªán tho·∫°i"],
        "ƒë·ªãa ch·ªâ": ["ƒë·ªãa", "ƒë·ªãa ch·ªâ", "address"],
        "t√™n h√†ng": ["s·∫£n ph·∫©m", "t√™n h√†ng", "sp", "m√£ h√†ng"],
        "size": ["ghi ch√∫", "m√¥ t·∫£", "size", "chi ti·∫øt"],
        "s·ªë ti·ªÅn thu h·ªô": ["cod", "thu h·ªô", "ti·ªÅn cod", "ti·ªÅn thu"]
    }
    for key, kws in keywords.items():
        for col in columns:
            for kw in kws:
                if kw in str(col).lower():
                    mapping[key] = col
                    break
            if key in mapping:
                break
    return mapping

uploaded_files = st.file_uploader("T·∫£i l√™n file Excel (.xlsx)", type=["xlsx"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    for uploaded_file in uploaded_files:
        try:
            xls = pd.ExcelFile(uploaded_file)
            for sheet_name in xls.sheet_names:
                st.header(f"üîç Sheet: {sheet_name}")
                df_raw = pd.read_excel(uploaded_file, sheet_name=sheet_name, dtype=str)
                
                # Ki·ªÉm tra n·∫øu d√≤ng ƒë·∫ßu ti√™n kh√¥ng ph·∫£i l√† ti√™u ƒë·ªÅ
                first_row = df_raw.iloc[0].astype(str)
                numeric_like = sum([cell.strip().replace('.', '', 1).isdigit() for cell in first_row])
                
                if numeric_like >= len(first_row) - 2:
                    df = df_raw.copy()
                    df.columns = [f"C·ªôt {i+1}" for i in range(df.shape[1])]
                else:
                    df = df_raw[1:].copy()
                    df.columns = first_row

                columns = df.columns.tolist()
                mapping = auto_map_columns(columns)

                required = ["h·ªç t√™n", "s·ªë ƒëi·ªán tho·∫°i", "ƒë·ªãa ch·ªâ", "t√™n h√†ng", "size", "s·ªë ti·ªÅn thu h·ªô"]
                for field in required:
                    if field not in mapping:
                        mapping[field] = st.selectbox(
                            f"Ch·ªçn c·ªôt cho '{field}'",
                            columns,
                            key=f"{uploaded_file.name}_{sheet_name}_{field}"
                        )

                # G·ªôp t√™n s·∫£n ph·∫©m + size
                df["t√™n s·∫£n ph·∫©m"] = df[mapping["t√™n h√†ng"]].astype(str) + " Size " + df[mapping["size"]].astype(str)

                # X·ª≠ l√Ω s·ªë ti·ªÅn thu h·ªô
                df[mapping["s·ªë ti·ªÅn thu h·ªô"]] = pd.to_numeric(df[mapping["s·ªë ti·ªÅn thu h·ªô"]].str.replace(",", "").str.extract("(\d+)")[0], errors='coerce').fillna(0).astype(int)

                ghn_df = pd.DataFrame({
                    "H·ªç t√™n ng∆∞·ªùi nh·∫≠n": df[mapping["h·ªç t√™n"]],
                    "S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n": df[mapping["s·ªë ƒëi·ªán tho·∫°i"]],
                    "ƒê·ªãa ch·ªâ": df[mapping["ƒë·ªãa ch·ªâ"]],
                    "G√≥i c∆∞·ªõc": 2,
                    "Y√™u c·∫ßu ƒë∆°n h√†ng": 2,
                    "T√™n s·∫£n ph·∫©m": df["t√™n s·∫£n ph·∫©m"],
                    "S·ªë l∆∞·ª£ng": 1,
                    "Kh·ªëi l∆∞·ª£ng (gram)": 500,
                    "Chi·ªÅu d√†i (cm)": 10,
                    "Chi·ªÅu r·ªông (cm)": 10,
                    "Chi·ªÅu cao (cm)": 10,
                    "Gi√° tr·ªã h√†ng h√≥a": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Khai gi√° (C√≥/Kh√¥ng)": "x",
                    "Ti·ªÅn thu h·ªô (COD)": df[mapping["s·ªë ti·ªÅn thu h·ªô"]],
                    "Shop tr·∫£ ph√≠ v·∫≠n chuy·ªÉn": "x",
                    "G·ª≠i h√†ng t·∫°i b∆∞u c·ª•c": "",
                    "M√£ h√†ng ri√™ng c·ªßa shop": "",
                    "Ghi ch√∫ th√™m": "",
                    "Ca l·∫•y h√†ng": 1,
                    "Giao th·∫•t b·∫°i thu ti·ªÅn": 30000
                })

                all_data.append(ghn_df)

        except Exception as e:
            st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω file {uploaded_file.name}: {e}")

    if all_data:
        result = pd.concat(all_data, ignore_index=True)
        st.success("‚úÖ T·∫•t c·∫£ sheet ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!")
        st.dataframe(result)

        towrite = io.BytesIO()
        result.to_excel(towrite, index=False, engine="openpyxl")
        st.download_button("üì• T·∫£i xu·ªëng file GHN", data=towrite.getvalue(), file_name="GHN_output.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
